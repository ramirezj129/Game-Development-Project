Ship ship = new Ship();
// Declaring the ArrayList, note the use of the syntax "<Bullet>,<Enemy>,<Bomb>" to indicate
// our intention to fill this ArrayList with bullets, enemies, bomb objects
ArrayList<Bullet> bullets = new ArrayList<Bullet>();
ArrayList<Enemy> enemies = new ArrayList<Enemy>();
ArrayList<Bomb> bombs= new ArrayList<Bomb>();
// float for score and health
float score = 0;
float health = 100;
void setup()
{
  size(500,500);
  background(0);
  fill(255);
  stroke(255);
  for(int i= 0; i< 10; i++)
  {
  Enemy newEnemy= new Enemy(i * 20 + 10);
    enemies.add(newEnemy);
  }
  
}

void draw()
{
  background(0);
  ship.movement();
  ship.sketch();
  for(Bullet x: bullets)
  {
    x.movement();
    x.sketch();
  }
  for(Enemy x: enemies)
  {
   x.movement();
   x.sketch(); 
  }
  for(Bomb x: bombs)
  {
   x.movement();
   x.sketch(); 
  }
   collisionEnemyBullet(); 
   collisionBulletBombs();
   collisionBombsShip();
   eliminateBullets();
   eliminateBombs();
   textSize(20);
   text("Score: "+(int)score,20, 30);
   textSize(20);
   text("Health: "+(int)health,20, 480);
}

void keyPressed()
{
  ship.keyHold(keyCode);
}
void keyReleased()
{
 ship.keyRelease(keyCode);
  
}
void eliminateBullets()
{
  ArrayList<Bullet> bulletEliminate = new ArrayList<Bullet>();
  for(Bullet b: bullets)
  {
    if(b.y < 0) 
    {
     bulletEliminate.add(b); 
    }
  }
  bullets.removeAll(bulletEliminate);
}
void eliminateBombs()
{
  ArrayList<Bomb> bombsEliminate = new ArrayList<Bomb>();
  for(Bomb b: bombs)
  {
    if(b.y > 500) 
    {
     bombsEliminate.add(b); 
     
    }
  }
  bombs.removeAll(bombsEliminate);
}
void collisionEnemyBullet()
{
  ArrayList<Bullet> bulletEliminate = new ArrayList<Bullet>();
  ArrayList<Enemy> enemiesEliminate = new ArrayList<Enemy>();
  for(Bullet b:bullets)
  {
    for(Enemy e: enemies)
  {
    float distance = sqrt(pow(b.x-e.x,2) + pow(b.y-e.y,2));
    if(distance < 20 ) {
      bulletEliminate.add(b);
      enemiesEliminate.add(e);
      score++;
      
    }
  }
  
  }
  bullets.removeAll(bulletEliminate);
  enemies.removeAll(enemiesEliminate);
  
}
void collisionBulletBombs()
{
  ArrayList<Bullet> bulletEliminate = new ArrayList<Bullet>();
  ArrayList<Bomb> bombsEliminate = new ArrayList<Bomb>();
  for(Bullet ba: bullets)
  {
    for (Bomb bo: bombs)
    {
      float distance = sqrt(pow(bo.x-ba.x,2) + pow(bo.y-ba.y,2));
      if(distance < 10) 
      {
         bulletEliminate.add(ba);
         bombsEliminate.add(bo);
      }
    }
  }
  bullets.removeAll(bulletEliminate);
  bombs.removeAll(bombsEliminate);
}
void collisionBombsShip()
{
  
  for(Bomb b: bombs)
  {
    float distance = sqrt(pow(b.x-ship.x,2) + pow(b.y-ship.y,2));
    if(distance < 5)
    {
      if(health >0){
      health = health - 2;
      }
      
    else if(health <= 1)
      {
       println("GAME OVER");
      exit();
      }
    }
    
  }
  
}
